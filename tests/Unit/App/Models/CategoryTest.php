<?php

namespace Tests\Unit\App\Models;

use App\Models\Category;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Cache;
use Tests\TestCase;

class CategoryTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        // DB接続先がテスト用に切り替わっているか確認
        // dd(env('APP_ENV'), env('DB_DATABASE'), env('DB_CONNECTION'));
    }

    /**
     * @test
     */
    public function getCategoryAll_テーブルにレコードが1件も存在しない場合空のコレクションが返ってくること(): void
    {
        $category = Category::getCategoryAll();
        $this->assertTrue($category->isEmpty());
    }

    /**
     * @test
     */
    public function getCategoryAll_テーブルにレコードが1件も存在しない場合countすると0になること(): void
    {
        self::assertSame(0, count(Category::getCategoryAll()));
    }

    /**
     * @test
     */
    public function getCategoryAll_テーブルにレコードがある場合全てのレコードが返ってくること(): void
    {
        $num = 3;
        Category::factory($num)->create();
        self::assertSame($num, count(Category::getCategoryAll()));
    }
    
    /**
     * @test
     */
    public function getCategoryAll_userId指定時テーブルにレコードが1件も存在しない場合空のコレクションが返ってくること(): void
    {
        $userId = '10';
        $category = Category::getCategoryAll($userId);
        $this->assertTrue($category->isEmpty());
    }

    /**
     * @test
     */
    public function getCategoryAll_userId指定時テーブルにレコードが1件も存在しない場合countすると0になること(): void
    {
        $userId = '10';
        self::assertSame(0, count(Category::getCategoryAll($userId)));
    }

    /**
     * @test
     */
    public function getCategoryAll_userId指定時テーブルにレコードがある場合全てのレコードが返ってくること(): void
    {
        $userId = '10';
        $num = 3;
        Category::factory($num)->create(['user_id' => $userId]);
        self::assertSame($num, count(Category::getCategoryAll($userId)));
    }

    /**
     * @test
     */
    public function getCategoryAll_userId指定してメソッド実行後にキャッシュが生成されていること(): void
    {
        $userId = '10';
        $cacheKey = Category::CATEGORY_CACHE_KEY . '_user_id_' . $userId;

        self::assertNull(Cache::get($cacheKey)); // メソッド実行前はキャッシュが存在しないこと

        $num = 3;
        Category::factory($num)->create(['user_id' => $userId]);

        Category::getCategoryAll($userId);

        self::assertNotNull(Cache::get($cacheKey)); // メソッド実行後はキャッシュが生成されていること
    }

    /**
     * @test
     */
    public function getCategoryName_categoriesテーブに存在しないidを指定された場合nullを返すこと(): void
    {
        $id = '90000'; // 存在しないid
        self::assertNull(Category::getCategoryName($id));
    }

    /**
     * @test
     */
    public function getCategoryName_categoriesテーブに存在するidを指定された場合該当するカテゴリー名を返すこと(): void
    {
        $id = '1';
        $categoryName = 'test category 1';
        Category::factory()->create(['id' => $id, 'name' => $categoryName]);

        self::assertSame($categoryName, Category::getCategoryName($id));
    }
}
